package com.expense.mvc.model.entity;

// Generated Jul 12, 2012 1:19:22 PM by Hibernate Tools 3.4.0.CR1. Customized by Bala.
//Customization - 1. Field level Annotations
//				- 2. Extends Entity for ToString Implementation.

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.expense.utils.FormatUtils;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "ACCOUNT")
public class Account extends com.expense.mvc.model.BaseEntity implements java.io.Serializable, Comparable<Account> {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ACCOUNT_ID", unique = true, nullable = false)
	private Integer accountId;

	@Column(name = "DATA_KEY", nullable = false)
	private int dataKey;

	@Column(name = "DESCRIPTION", nullable = false, length = 25)
	private String description;

	@Column(name = "TALLY_BALANCE", precision = 11)
	private Double tallyBalance;

	@Column(name = "TALLY_DATE")
	private String strTallyDate;

	@Column(name = "BALANCE_AMT", precision = 11)
	private Double balanceAmt;

	@Column(name = "TYPE", length = 1)
	private Character type;

	public enum Type {
		CASH('C'), CREDIT('R');

		public char type;

		private Type(char type) {
			this.type = type;
		}
	}

	@Column(name = "IMAGE_CODE", length = 4)
	private String imageCode;

	public enum ImageCode {
		VISA("VISA"), MCARD("MCARD"), AMEX("AMEX"), CASH("CASH"), NONE("NONE");

		public String code;

		private ImageCode(String code) {
			this.code = code;
		}
	}

	@Column(name = "STATUS", length = 1)
	private Character status;

	public enum Status {
		ACTIVE('A'), INACTIVE('I');

		public char status;

		private Status(char status) {
			this.status = status;
		}
	}

	@Column(name = "BILL_OPTION", length = 1)
	private Character billOption;

	public enum BillOption {
		YES('Y'), NO('N');

		public char billOption;

		private BillOption(char billOption) {
			this.billOption = billOption;
		}
	}

	@Column(name = "CLOSING_DAY")
	private Integer closingDay;

	@Column(name = "DUE_DAY")
	private Integer dueDay;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LAST_BILL_ID")
	private Bill lastBill;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "OPEN_BILL_ID")
	private Bill openBill;

	@Column(name = "DISPLAY_ORDER")
	private Short displayOrder;

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fromAccount")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<Transaction> transForFromAccount = new HashSet<Transaction>(0);

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "toAccount")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<Transaction> transForToAccount = new HashSet<Transaction>(0);

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<TallyHistory> tallyHistories = new HashSet<TallyHistory>(0);

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	@Cascade({ CascadeType.DELETE_ORPHAN, CascadeType.ALL })
	private Set<Bill> bills = new HashSet<Bill>(0);

	public Account() {
	}

	public Integer getAccountId() {
		return accountId;
	}

	public void setAccountId(Integer accountId) {
		this.accountId = accountId;
	}

	public int getDataKey() {
		return dataKey;
	}

	public void setDataKey(int dataKey) {
		this.dataKey = dataKey;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Double getTallyBalance() {
		return tallyBalance;
	}

	public void setTallyBalance(Double tallyBalance) {
		this.tallyBalance = tallyBalance;
	}

	public String getStrTallyDate() {
		return strTallyDate;
	}

	public void setStrTallyDate(String strTallyDate) {
		this.strTallyDate = strTallyDate;
	}

	public Date getTallyDate() {
		try {
			return FormatUtils.yyyyMMddHHmmss.parse(strTallyDate);
		} catch (Exception e) {
			return new Date(0);
		}
	}

	public void setTallyDate(Date tallyDate) {
		strTallyDate = FormatUtils.yyyyMMddHHmmss.format(tallyDate);
	}

	public Double getBalanceAmt() {
		return balanceAmt;
	}

	public void setBalanceAmt(Double balanceAmt) {
		this.balanceAmt = balanceAmt;
	}

	public Character getType() {
		return type;
	}

	public void setType(Character type) {
		this.type = type;
	}

	public String getImageCode() {
		return imageCode;
	}

	public void setImageCode(String imageCode) {
		this.imageCode = imageCode;
	}

	public Character getStatus() {
		return status;
	}

	public void setStatus(Character status) {
		this.status = status;
	}

	public Character getBillOption() {
		return billOption;
	}

	public void setBillOption(Character billOption) {
		this.billOption = billOption;
	}

	public Integer getClosingDay() {
		return closingDay;
	}

	public void setClosingDay(Integer closingDay) {
		this.closingDay = closingDay;
	}

	public Integer getDueDay() {
		return dueDay;
	}

	public void setDueDay(Integer dueDay) {
		this.dueDay = dueDay;
	}

	public Bill getLastBill() {
		return lastBill;
	}

	public void setLastBill(Bill lastBill) {
		this.lastBill = lastBill;
	}

	public Bill getOpenBill() {
		return openBill;
	}

	public void setOpenBill(Bill openBill) {
		this.openBill = openBill;
	}

	public Short getDisplayOrder() {
		return displayOrder;
	}

	public void setDisplayOrder(Short displayOrder) {
		this.displayOrder = displayOrder;
	}

	public Set<Transaction> getTransForFromAccount() {
		return transForFromAccount;
	}

	public void setTransForFromAccount(Set<Transaction> transForFromAccount) {
		this.transForFromAccount = transForFromAccount;
	}

	public Set<Transaction> getTransForToAccount() {
		return transForToAccount;
	}

	public void setTransForToAccount(Set<Transaction> transForToAccount) {
		this.transForToAccount = transForToAccount;
	}

	public void setTallyHistories(Set<TallyHistory> tallyHistories) {
		this.tallyHistories = tallyHistories;
	}

	public Set<TallyHistory> getTallyHistories() {
		return tallyHistories;
	}

	public Set<Bill> getBills() {
		return bills;
	}

	public void setBills(Set<Bill> bills) {
		this.bills = bills;
	}

	public boolean isActive() {
		return status == Status.ACTIVE.status;
	}

	public boolean doesBills() {
		return billOption == BillOption.YES.billOption;
	}

	@Override
	public int compareTo(Account o) {
		if (o.displayOrder == null) {
			return -1;
		} else if (displayOrder == null) {
			return 1;
		} else {
			return displayOrder.compareTo(o.displayOrder);
		}
	}
}
